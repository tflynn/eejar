#!/usr/bin/env ruby

# Copyright (c) 2010 Tracy Flynn - All rights reserved
# May be distributed under the same terms as Ruby

require 'fileutils'

NO_BANNER=false

if __FILE__ =~ /eejar/
  executable_type = :jar
  executable_name = 'eejar'
elsif __FILE__ =~ /eewar/
  executable_type = :war
  executable_name = 'eewar'
elsif __FILE__ =~ /eespringwar/
  executable_type = :springwar
  executable_name = 'eespringwar'
end
EXECUTABLE_TYPE=executable_type
EXECUTABLE_NAME=executable_name


DESCRIPTION_TEXT=<<DESCRIPTION_TEXT_TEMPLATE
Overview
--------

[EXECUTABLE_NAME] is a script that will create a skeleton for a single [PROJECT_DESCRIPTION].

It uses the same concepts as a Maven archetype - groupID, artifactID and so on.

In addition to the effective results of 'mvn archetype:generate' for a suitable archetype,
the script will add:

- Configuration and logging settings using EEProperties and Slf4jExt
- Other artifacts suitable to the type of project
- Sample code sufficient to create a runnable application

To run
------

./#{EXECUTABLE_NAME}

and respond to the prompts, or accept the defaults offered.

Options:

-q quiet mode - Disable this message

Testing the result
-----------------

Example is for groupId 'com.example', artifact 'sampleproduct' and package  'com.example.sampleproduct'

Run

cd sampleproduct

mvn package

[RUN_INSTRUCTIONS]

See also
--------

http://olioinfo.net/javadocs/eeproperties/2.8/index.html
http://olioinfo.net/javadocs/Slf4jExt/2.5/index.html

DESCRIPTION_TEXT_TEMPLATE


#####
# Edit defaults starting here
#####



DEFAULT_GROUP_ID='net.olioinfo'
DEFAULT_ARTIFACT_VERSION='1.0'

SOURCE_CODE_AUTHOR='Tracy Flynn'

POM_DEPENDENCY_JUNIT_VERSION='4.8.1'
POM_DEPENDENCY_SLF4J_JCL_OVER_SLF4J_VERSION='1.5.8'
POM_DEPENDENCY_SLF4J_SLF4J_API_VERSION='1.5.8'
POM_DEPENDENCY_SLF4J_SLF4J_LOG4J12_VERSION='1.5.8'
POM_DEPENDENCY_LOG4J_VERSION='1.2.14'
POM_DEPENDENCY_EEPROPERTIES_VERSION='2.8'
POM_DEPENDENCY_SL4J_EXT_VERSION='2.5'
POM_DEPENDENCY_JMOCK_JUNIT4_VERSION='2.5.1'

DEFAULT_SOURCE_CODE_COPYRIGHT_MESSAGE=<<DEFAULT_SOURCE_CODE_COPYRIGHT_MESSAGE_TEMPLATE
/* Copyright 2009-2010 Tracy Flynn
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
DEFAULT_SOURCE_CODE_COPYRIGHT_MESSAGE_TEMPLATE

#####
# End editing defaults - Do not edit below this point
#####

EEJAR_TITLE=EXECUTABLE_NAME
EEJAR_VERSION_MAJOR=2
EEJAR_VERSION_MINOR=0
EEJAR_VERSION="#{EEJAR_VERSION_MAJOR}.#{EEJAR_VERSION_MINOR}"
EEJAR_AUTHOR='Tracy Flynn'
EEJAR_VERSION_DATE='2010-09-11'
EEJAR_COPYRIGHT='Copyright (c) 2009-2010 Tracy Flynn - All rights reserved'
EEJAR_DISTRIBUTION='May be distributed under the same terms as Ruby'

BANNER=<<BANNER_TEMPLATE

Title: #{EEJAR_TITLE} 
Version: #{EEJAR_VERSION} 
Author: #{EEJAR_AUTHOR}

#{EEJAR_COPYRIGHT}
#{EEJAR_DISTRIBUTION}

#{DESCRIPTION_TEXT}
BANNER_TEMPLATE

DEFAULT_PROJECT_DIRECTORIES = %w{
  /docs
  /logs
  /src
  /src/main
  /src/main/java
  /src/main/resources
  /src/test
  /src/test/java
}

PACKAGE_SPECIFIC_DIRECTORIES = %w{
  /src/main/java/[PACKAGE]
  /src/main/resources/[PACKAGE]
  /src/test/java/[PACKAGE]
}

EEPROPERTIES_FILE_NAMES=%w{defaults-ee.properties development-ee.properties test-ee.properties}



POM_PACKAGING_JAR='jar'
POM_PACKAGING=POM_PACKAGING_JAR

POM_CONTENTS_JAR=<<POM_TEMPLATE_JAR
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>[PACKAGE]</groupId>
    <artifactId>[ARTIFACT_ID]</artifactId>
    <version>[ARTIFACT_VERSION]</version>
    <packaging>#{POM_PACKAGING}</packaging>

    <name>[ARTIFACT_ID]</name>
    <url>http://maven.apache.org</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.0.2</version>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
                <executions>
                    <execution>
                        <id>make-my-jar-with-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>net-oilinfo</id>
            <url>http://myowndemo.com:8080/nexus/content/repositories/net-olioinfo</url>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>#{POM_DEPENDENCY_JUNIT_VERSION}</version>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>#{POM_DEPENDENCY_SLF4J_JCL_OVER_SLF4J_VERSION}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>#{POM_DEPENDENCY_SLF4J_SLF4J_API_VERSION}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>#{POM_DEPENDENCY_SLF4J_SLF4J_LOG4J12_VERSION}</version>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>#{POM_DEPENDENCY_LOG4J_VERSION}</version>
        </dependency>

        <dependency>
            <groupId>net.olioinfo</groupId>
            <artifactId>eeproperties</artifactId>
            <version>#{POM_DEPENDENCY_EEPROPERTIES_VERSION}</version>
        </dependency>

        <dependency>
            <groupId>net.olioinfo</groupId>
            <artifactId>slf4j-ext</artifactId>
            <version>#{POM_DEPENDENCY_SL4J_EXT_VERSION}</version>
        </dependency>

        <dependency>
            <groupId>org.jmock</groupId>
            <artifactId>jmock-junit4</artifactId>
            <version>#{POM_DEPENDENCY_JMOCK_JUNIT4_VERSION}</version>
        </dependency>

    </dependencies>
</project>
POM_TEMPLATE_JAR

GIT_IGNORE_CONTENTS=<<GITIGNORE_TEMPLATE
.DS_Store
logs
logs/*
target
target/*
.idea/workspace.xml
.idea/tasks.xml
projectFilesBackup*
projectFilesBackup*/*
Sample.java
SampleTest.java
GITIGNORE_TEMPLATE

SAMPLE_JAVA_CONTENTS=<<SAMPLE_JAVA_TEMPLATE
[COPYRIGHT_MESSAGE]
package [PACKAGE];

import net.olioinfo.eeproperties.EEProperties;
import net.olioinfo.slf4j.Slf4jExt;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A brief description of what this class does
 *
 * @author #{SOURCE_CODE_AUTHOR}
 * @version [ARTIFACT_VERSION]
 * @since [ARTIFACT_VERSION]
 */
public class Sample {

    /**
     * Logger instance
     */
    private static final Logger logger = LoggerFactory.getLogger(Sample.class);

    /**
     * A brief description of what this method does
     *
     * @param args An array of command-line arguments
     *
     */
    public static void main( String[] args ) {
      
        // Configure using EEProperties and Slf4jExt
        EEProperties.sLoadPackageConfiguration(Sample.class);
        Slf4jExt.sConfigureLogging(Sample.class,null,null);
      
        String defaultProperty = EEProperties.sGetProperty("[PACKAGE].default.property.should.not.be.overridden");
        String developmentProperty = EEProperties.sGetProperty("[PACKAGE].development.property.should.be.overridden");
        System.out.println( "Hello From " + Sample.class.getName() );
        System.out.println(String.format("Demonstrating default property - %s",defaultProperty));
        System.out.println(String.format("Demonstrating development property overriding default - %s",developmentProperty));
        logger.debug("Log message from " + Sample.class.getName() );
    }
}

SAMPLE_JAVA_TEMPLATE

SAMPLE_JAVA_TEST_CONTENTS=<<SAMPLE_JAVA_TEST_TEMPLATE
[COPYRIGHT_MESSAGE]
package [PACKAGE];

import net.olioinfo.eeproperties.EEProperties;
import net.olioinfo.slf4j.Slf4jExt;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.runner.RunWith;

import org.jmock.Expectations;
import org.jmock.Mockery;
import org.jmock.integration.junit4.JMock;
import org.jmock.integration.junit4.JUnit4Mockery;

/**
 * A brief description of what this class does
 *
 * @author #{SOURCE_CODE_AUTHOR}
 * @version [ARTIFACT_VERSION]
 * @since [ARTIFACT_VERSION]
 */
 
@RunWith(JMock.class)
public class SampleTest {

    Mockery context = new JUnit4Mockery(); 

    /**
     * Logger instance
     */
    private static final Logger logger = LoggerFactory.getLogger(Sample.class);

    @Test
    public void testSomething() {
        assertTrue(true);
    }

}

SAMPLE_JAVA_TEST_TEMPLATE

EEPROPERTIES_DEFAULTS_CONTENTS=<<EEPROPERTIES_DEFAULTS_TEMPLATE
# Delete these test properties
[PACKAGE].default.property.should.not.be.overridden = "will see me - a default value"
[PACKAGE].development.property.should.be.overridden = "won't see me - a default value"
EEPROPERTIES_DEFAULTS_TEMPLATE

EEPROPERTIES_DEVELOPMENT_CONTENTS=<<EEPROPERTIES_DEVELOPMENT_TEMPLATE
# Delete these test properties
[PACKAGE].development.property.should.be.overridden = "will see me - a development value"
EEPROPERTIES_DEVELOPMENT_TEMPLATE

EEPROPERTIES_TEST_CONTENTS=<<EEPROPERTIES_TEST_TEMPLATE
[PACKAGE].test.property = "will see me - a test value"
EEPROPERTIES_TEST_TEMPLATE


LOG4J_DEFAULTS_CONTENTS=<<LOG4J_DEFAULTS_TEMPLATE
log4j.appender.[PACKAGE].CONSOLE_APPENDER=org.apache.log4j.ConsoleAppender
log4j.appender.[PACKAGE].CONSOLE_APPENDER.layout=org.apache.log4j.PatternLayout
log4j.appender.[PACKAGE].CONSOLE_APPENDER.layout.ConversionPattern=%d{ISO8601}\t\t[%-5p]\t\t[%t]\t%m %n
log4j.logger.[PACKAGE] = ERROR, [PACKAGE].CONSOLE_APPENDER
LOG4J_DEFAULTS_TEMPLATE

LOG4J_DEVELOPMENT_CONTENTS=<<LOG4J_DEVELOPMENT_TEMPLATE
log4j.appender.[PACKAGE].CONSOLE_APPENDER=org.apache.log4j.ConsoleAppender
log4j.appender.[PACKAGE].CONSOLE_APPENDER.layout=org.apache.log4j.PatternLayout
log4j.appender.[PACKAGE].CONSOLE_APPENDER.layout.ConversionPattern=%d{ISO8601}\t\t[%-5p]\t\t[%t]\t%m %n
log4j.logger.[PACKAGE] = TRACE, [PACKAGE].CONSOLE_APPENDER
LOG4J_DEVELOPMENT_TEMPLATE

LOG4J_TEST_CONTENTS=<<LOG4J_TEST_TEMPLATE
log4j.appender.[PACKAGE].CONSOLE_APPENDER=org.apache.log4j.ConsoleAppender
log4j.appender.[PACKAGE].CONSOLE_APPENDER.layout=org.apache.log4j.PatternLayout
log4j.appender.[PACKAGE].CONSOLE_APPENDER.layout.ConversionPattern=%d{ISO8601}\t\t[%-5p]\t\t[%t]\t%m %n
log4j.logger.[PACKAGE] = DEBUG, [PACKAGE].CONSOLE_APPENDER
LOG4J_TEST_TEMPLATE

JAR_RUN_INSTRUCTIONS=<<JAR_RUN_INSTRUCTIONS_TEMPLATE
Then issue a command similar to:

java -cp ./target/sampleproduct-1.0-jar-with-dependencies.jar  com.example.sampleproduct.Sample
JAR_RUN_INSTRUCTIONS_TEMPLATE

WAR_RUN_INSTRUCTIONS=<<WAR_RUN_INSTRUCTIONS_TEMPLATE
Then issue a command similar to:

Don't know yet

java -cp ./target/sampleproduct-1.0-jar-with-dependencies.jar  com.example.sampleproduct.Sample
WAR_RUN_INSTRUCTIONS_TEMPLATE

SPRINGWAR_RUN_INSTRUCTIONS=<<SPRINGWAR_RUN_INSTRUCTIONS_TEMPLATE
Then issue a command similar to:

Don't know yet Spring

java -cp ./target/sampleproduct-1.0-jar-with-dependencies.jar  com.example.sampleproduct.Sample
SPRINGWAR_RUN_INSTRUCTIONS_TEMPLATE

EXECUTABLE_TYPE_INFO = {
  :jar => {:project_description => 'JAR-based Maven Project',
           :run_instructions => JAR_RUN_INSTRUCTIONS},
  :war => {:project_description => 'servlet (WAR) Maven Project',
           :run_instructions => WAR_RUN_INSTRUCTIONS},
  :springwar => {:project_description => 'Spring MVC WAR-based Maven Project',
           :run_instructions => SPRINGWAR_RUN_INSTRUCTIONS}
}

class EEJar
  
  class << self
    
    def run
      eejar = EEJar.new
      eejar.run
    end
    
  end
  
  def initialize
    @debug = false
    @starting_dir = Dir.getwd
    if @debug
      @starting_dir = File.join(@starting_dir,'debug')
    end
    
  end
  
  def debug(msg)
    if @debug
      puts msg
    end
  end
  
  def run
    display_banner
    get_user_input
    create_directory_structure
    create_project_files
  end
  
  def display_banner
    quiet_mode = ARGV.detect{|arg| arg =~ /-q/}
    if quiet_mode.nil? and (not NO_BANNER)
      executable_info = EXECUTABLE_TYPE_INFO[EXECUTABLE_TYPE]
      banner = BANNER.gsub(/\[EXECUTABLE_NAME\]/,EXECUTABLE_NAME)
      project_description = executable_info[:project_description]
      banner = banner.gsub(/\[PROJECT_DESCRIPTION\]/,project_description)
      run_instructions = executable_info[:run_instructions]
      banner = banner.gsub(/\[RUN_INSTRUCTIONS\]/,run_instructions)
      puts banner
    end
  end
  
  def get_user_input
    @group_id = get_input_line("Enter group id (#{DEFAULT_GROUP_ID})", true).strip.chomp
    @group_id = DEFAULT_GROUP_ID if @group_id == ""
    @artifact_id = get_input_line("Enter artifact ID")
    @artifact_version = get_input_line("Enter version (#{DEFAULT_ARTIFACT_VERSION})", true).strip.chomp
    @artifact_version = DEFAULT_ARTIFACT_VERSION if @artifact_version == ''
    default_package = "#{@group_id}.#{@artifact_id}"
    @package = get_input_line("Enter package (#{default_package})", true).strip.chomp
    @package = default_package if @package == ""
  end
  
  def get_input_line(prompt, allow_empty = false)
    input_line = nil
    while (input_line.nil? || input_line == '') 
      STDOUT.print "#{prompt} : "
      input_line = STDIN.gets
      unless allow_empty
        input_line = input_line.strip.chomp
      end
    end
    return input_line
  end

  def create_directory_structure
    # Clean out existing directory
    delete_tree_with_prompt(File.join(@starting_dir,@artifact_id))
    # Create standard directories
    DEFAULT_PROJECT_DIRECTORIES.each do |relative_directory|
      qualified_directory = File.join(@starting_dir,@artifact_id,relative_directory)
      debug("About to create " + qualified_directory)
      FileUtils.mkdir_p(qualified_directory)
    end
    # Create package-specific directories
    PACKAGE_SPECIFIC_DIRECTORIES.each do |partial_package_directory|
      package_dir = @package.gsub(/\./,'/')
      qualified_directory = File.join(@starting_dir,@artifact_id,partial_package_directory.sub(/\[PACKAGE\]/,package_dir))
      debug("About to create " + qualified_directory)
      FileUtils.mkdir_p(qualified_directory)
    end
    
  end
  
  def delete_tree_with_prompt(root_dir)
    if File.exists?(root_dir)
      qualified_path = File.expand_path(root_dir)
      yes_no = get_input_line("Warning: About to delete #{qualified_path}. [Y/N]")
      if yes_no.downcase =~ /^y/
        puts "Deleting #{qualified_path}"
        FileUtils.rm_rf(qualified_path)
      end
    end
  end
  
  def create_project_files
    create_gitignore
    create_pom
    create_placeholder_files
    create_configuration_files
    create_sample_files
  end
  
  def create_gitignore
    git_ignore_file_name = File.join(@starting_dir,@artifact_id,".gitignore")
    debug("Creating #{git_ignore_file_name}")
    File.open(git_ignore_file_name,'w') do |git_ignore_file|
      git_ignore_file.puts GIT_IGNORE_CONTENTS
    end
  end
  
  def create_pom
    pom = POM_CONTENTS_JAR.gsub(/\[PACKAGE\]/,@package)
    pom = pom.gsub(/\[ARTIFACT_ID\]/,@artifact_id)
    pom = pom.gsub(/\[ARTIFACT_VERSION\]/,@artifact_version)
    pom_file_name = File.join(@starting_dir,@artifact_id,"pom.xml")
    debug("Creating #{pom_file_name}")
    File.open(pom_file_name,'w') do |pom_file|
      pom_file.puts pom
    end
  end
  
  def create_placeholder_files
    docs_placeholder_file_name = File.join(@starting_dir,@artifact_id,'docs','index.html')
    FileUtils.touch(docs_placeholder_file_name)
  end
  
  def create_sample_files
    create_sample_java_file
    create_sample_java_test_file
  end
  
  def create_sample_java_file
    java = SAMPLE_JAVA_CONTENTS
    java = java.gsub(/\[COPYRIGHT_MESSAGE\]/,DEFAULT_SOURCE_CODE_COPYRIGHT_MESSAGE)
    java = java.gsub(/\[PACKAGE\]/,@package)
    java = java.gsub(/\[ARTIFACT_VERSION\]/,@artifact_version)
    package_dir = @package.gsub(/\./,'/')
    java_file_name = File.join(@starting_dir,@artifact_id,'/src/main/java',package_dir,'Sample.java')
    debug("Creating #{java_file_name}")
    File.open(java_file_name,'w') do |java_file|
      java_file.puts java
    end
  end

  def create_sample_java_test_file
    java = SAMPLE_JAVA_TEST_CONTENTS
    java = java.gsub(/\[COPYRIGHT_MESSAGE\]/,DEFAULT_SOURCE_CODE_COPYRIGHT_MESSAGE)
    java = java.gsub(/\[PACKAGE\]/,@package)
    java = java.gsub(/\[ARTIFACT_VERSION\]/,@artifact_version)
    package_dir = @package.gsub(/\./,'/')
    java_file_name = File.join(@starting_dir,@artifact_id,'/src/test/java',package_dir,'SampleTest.java')
    debug("Creating #{java_file_name}")
    File.open(java_file_name,'w') do |java_file|
      java_file.puts java
    end
  end

  def create_configuration_files
    create_configuration_file("defaults-ee.properties",EEPROPERTIES_DEFAULTS_CONTENTS)
    create_configuration_file("development-ee.properties",EEPROPERTIES_DEVELOPMENT_CONTENTS)
    create_configuration_file("test-ee.properties",EEPROPERTIES_TEST_CONTENTS)
    create_configuration_file('log4j-defaults.properties',LOG4J_DEFAULTS_CONTENTS)
    create_configuration_file('log4j-development.properties',LOG4J_DEVELOPMENT_CONTENTS)
    create_configuration_file('log4j-test.properties',LOG4J_TEST_CONTENTS)
  end
  
  def create_configuration_file(name,contents)
    package_dir = @package.gsub(/\./,'/')
    directory_prefix = File.join(@starting_dir,@artifact_id,'/src/main/resources',package_dir)
    contents = contents.gsub(/\[PACKAGE\]/,@package)
    full_log4j_configuration_file = File.join(directory_prefix,name)
    debug("Creating #{full_log4j_configuration_file}")
    File.open(full_log4j_configuration_file,'w') do |file|
      file.puts contents
    end
  end
  
end

if $0 == __FILE__

  EEJar.run
  
end